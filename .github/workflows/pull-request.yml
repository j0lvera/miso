name: Code Review with miso

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main ]

jobs:
  code-review:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write # Required to comment on PRs
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for diff analysis
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Install miso
      run: |
        # Option 1: Install from source (if this is the miso repo)
        go build -o miso cmd/main/main.go
        
        # Option 2: Install from release (uncomment when published)
        # curl -L https://github.com/your-org/miso/releases/latest/download/miso-linux-amd64 -o miso
        # chmod +x miso
    
    - name: Validate configuration
      run: |
        if [ -f "miso.yml" ] || [ -f ".miso.yml" ]; then
          ./miso validate-config
        else
          echo "No miso configuration found, using defaults"
        fi
    
    - name: Review changed files (PR)
      if: github.event_name == 'pull_request'
      env:
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      run: |
        # Get the base branch for comparison
        BASE_SHA="${{ github.event.pull_request.base.sha }}"
        HEAD_SHA="${{ github.event.pull_request.head.sha }}"
        
        echo "Reviewing changes between $BASE_SHA and $HEAD_SHA"
        
        # Review the diff
        ./miso diff "$BASE_SHA..$HEAD_SHA" > review-output.md
        
        # Save review output as artifact
        echo "# üç≤ miso Code review" > pr-review.md
        echo "" >> pr-review.md
        cat review-output.md >> pr-review.md
    
    - name: Review recent changes (Push)
      if: github.event_name == 'push'
      env:
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      run: |
        echo "Reviewing recent changes in push to ${{ github.ref_name }}"
        
        # Get the base and head commits from the event payload
        BASE_SHA="${{ github.event.before }}"
        HEAD_SHA="${{ github.event.after }}"

        # For the first push to a new branch, 'before' is all zeros.
        # In this case, we diff against the empty tree.
        if [[ "${{ github.event.before }}" == '0000000000000000000000000000000000000000' ]]; then
          echo "Initial push detected. Comparing against empty tree."
          BASE_SHA=$(git hash-object -t tree /dev/null)
        fi
        
        echo "Reviewing changes between $BASE_SHA and $HEAD_SHA"
        
        # Review the diff
        ./miso diff "${BASE_SHA}..${HEAD_SHA}" > review-output.md
        
        echo "# üç≤ miso Code review - Recent Changes" > push-review.md
        echo "" >> push-review.md
        cat review-output.md >> push-review.md
    
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read the review output
          let reviewContent = '';
          try {
            reviewContent = fs.readFileSync('pr-review.md', 'utf8');
          } catch (error) {
            reviewContent = '# üç≤ miso Code review\n\nNo review content generated.';
          }
          
          // Find existing review comment
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.data.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('üç≤ miso Code review')
          );
          
          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: reviewContent
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: reviewContent
            });
          }
    
    - name: Upload review artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-review-output
        path: |
          *-review.md
          review-output.md
        retention-days: 30
